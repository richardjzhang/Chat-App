{"version":3,"sources":["views/Desktop/components/Sidebar.js","views/Desktop/index.js","styles.js","components/Separator.js","components/MessagesList.js","static/assets/send.svg","components/AddMessage/index.js"],"names":["Root","styled","div","padding","height","width","borderRight","colors","grayChateau","flexShrink","UsersList","maxHeight","overflow","Title","color","cloudBurst","fontSize","fontWeight","User","SidebarContainer","connect","state","user","users","length","Separator","size","name","map","u","idx","Fragment","id","display","alignItems","justifyContent","Messages","flexDirection","Desktop","MessagesList","AddMessage","dodgerBlue","honorNight","sail","iceCold","dairyCream","cupid","athensGray","shuttleGray","white","black","tappable","cursor","userSelect","WebkitTapHighlightColor","WebkitTouchCallout","breakpoints","laptop","props","grow","flexGrow","borderBottom","marginTop","MessageContainer","borderRadius","maxWidth","Message","MessagesListContainer","messages","message","prevMessage","groupMessages","author","isAuthor","css","backgroundColor","MessageInput","React","lazy","EmojiPicker","SendIcon","img","AddMessageContainer","dispatch","addMessage","textAreaRef","useRef","useState","setMessage","showEmojiPicker","setShowEmojiPicker","handleSendMessage","current","focus","trim","Suspense","fallback","placeholder","text","onChange","onKeyPress","e","key","preventDefault","onShowEmojiPicker","closeEmojiPicker","src","sendIcon","alt","onClick","isOpen","onEmojiSelect","emoji","m"],"mappings":"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","file":"static/js/6.ada9045a.chunk.js","sourcesContent":["// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport Separator from 'src/components/Separator';\nimport type { FullUser, ReducerState, Users } from 'src/reducers/types';\nimport { colors } from 'src/styles';\n\nconst Root = styled.div<{}>({\n  padding: 24,\n  height: '100%',\n  width: 400,\n  borderRight: `1px solid ${colors.grayChateau}`,\n  flexShrink: 0,\n});\n\nconst UsersList = styled.div<{}>({\n  maxHeight: '100%',\n  overflow: 'auto',\n});\n\nconst Title = styled.div<{}>({\n  color: colors.cloudBurst,\n  fontSize: 32,\n  fontWeight: 600,\n});\n\nconst User = styled.div<{}>({\n  color: colors.cloudBurst,\n  fontSize: 24,\n});\n\ntype Props = {|\n  user: FullUser,\n  users: Users,\n|};\n\nconst Sidebar = ({ users, user }: Props) => {\n  return (\n    <Root>\n      <Title>Users ({users.length || 1})</Title>\n      <Separator size={32} />\n      <User>{user?.name ?? 'You'}</User>\n      {users.length > 1 && <Separator size={12} />}\n      <UsersList>\n        {users.map((u, idx) => (\n          <React.Fragment key={u.id}>\n            {user?.id !== u.id && (\n              <>\n                <User>{u.name}</User>\n                {idx !== users.length - 1 && <Separator size={12} />}\n              </>\n            )}\n          </React.Fragment>\n        ))}\n      </UsersList>\n    </Root>\n  );\n};\n\nexport const SidebarContainer = connect(\n  (state: ReducerState) => ({\n    user: state.user,\n    users: state.users,\n  }),\n  {},\n)(Sidebar);\n\nexport default SidebarContainer;\n","// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport AddMessage from 'src/components/AddMessage';\nimport MessagesList from 'src/components/MessagesList';\n\nimport Sidebar from './components/Sidebar';\n\nconst Root = styled.div<{}>({\n  height: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n});\n\nconst Messages = styled.div<{}>({\n  display: 'flex',\n  flexDirection: 'column',\n  width: '100%',\n  height: '100%',\n});\n\nfunction Desktop() {\n  return (\n    <Root>\n      <Sidebar />\n      <Messages>\n        <MessagesList />\n        <AddMessage />\n      </Messages>\n    </Root>\n  );\n}\n\nexport default Desktop;\n","// @flow\nexport const colors = {\n  // Primary Colors\n  dodgerBlue: '#3B80FE',\n  cloudBurst: '#21374D',\n  honorNight: '#0C2426',\n\n  // Palette\n  sail: '#B7D8F9',\n  iceCold: '#B7F9D8',\n  dairyCream: '#F9D8B7',\n  cupid: '#F9B7D8',\n\n  // Greys\n  athensGray: '#E7E7EF',\n  grayChateau: '#A2AAB3',\n  shuttleGray: '#616470',\n\n  // Other\n  white: '#FFF',\n  black: '#000000',\n};\n\n// It doesn't fix all the possible issues on all browsers or devices, feel free to add rules\nexport const tappable = {\n  cursor: 'pointer',\n  userSelect: 'none', // to prevent the text selection (e.g. selecting text triggers the copy-paste popup menu on iOS and Android)\n  WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)', // to prevent the default tap highlight colour being applied\n  WebkitTouchCallout: 'none', // to prevent the context menu from showing, at least on iOS for anchor elements\n};\n\nexport const breakpoints = {\n  laptop: 1024,\n};\n","// @flow\nimport styled from '@emotion/styled';\n\nconst Separator = styled.div<{ grow?: boolean, size: number }>((props) => ({\n  flexShrink: 0,\n  height: props.size,\n  width: props.size,\n  ...(props.grow ? { flexGrow: 1 } : {}),\n}));\n\nexport default Separator;\n","// @flow\n/** @jsxImportSource @emotion/react */\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport Separator from 'src/components/Separator';\nimport type { ReducerState } from 'src/reducers/types';\nimport { breakpoints, colors } from 'src/styles';\n\nconst Root = styled.div<{}>({\n  display: 'flex',\n  flexDirection: 'column-reverse',\n  borderBottom: `1px solid ${colors.grayChateau}`,\n  marginTop: 12, // Hack to ensure that there is space above when there is overflow\n  padding: '0 20px 12px 20px',\n  height: '100%',\n  overflow: 'auto',\n});\n\nconst MessageContainer = styled.div<{}>({\n  padding: 12,\n  borderRadius: 16,\n  width: 'fit-content',\n  maxWidth: 400,\n\n  [`@media (max-width: ${breakpoints.laptop + 1}px)`]: {\n    maxWidth: 300,\n  },\n});\n\nconst User = styled.div<{}>({\n  fontSize: 16,\n  fontWeight: 600,\n});\n\nconst Message = styled.div<{}>({\n  fontSize: 16,\n});\n\nconst MessagesList = ({ messages, user }) => {\n  return (\n    <Root>\n      <div>\n        {messages.map((message, idx) => {\n          const prevMessage = idx > 0 ? messages[idx - 1] : null;\n          const groupMessages = prevMessage?.author.id === message.author.id;\n          const isAuthor = message.author.id === user.id;\n          return (\n            <React.Fragment key={message.id}>\n              {idx !== 0 && <Separator size={groupMessages ? 4 : 16} />}\n              <div css={{ display: 'flex' }}>\n                {isAuthor && <Separator grow size={16} />}\n                <MessageContainer\n                  css={{\n                    backgroundColor: isAuthor\n                      ? colors.dodgerBlue\n                      : colors.athensGray,\n                    color: isAuthor ? colors.white : colors.cloudBurst,\n                  }}\n                >\n                  {!isAuthor && (\n                    <>\n                      <User>{message.author}</User>\n                      <Separator size={4} />\n                    </>\n                  )}\n                  <Message>{message.message}</Message>\n                </MessageContainer>\n              </div>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </Root>\n  );\n};\n\nexport const MessagesListContainer = connect(\n  (state: ReducerState) => ({\n    messages: state.messages,\n    user: state.user,\n  }),\n  {},\n)(MessagesList);\n\nexport default MessagesListContainer;\n","export default __webpack_public_path__ + \"static/media/send.35a24809.svg\";","// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport Separator from 'src/components/Separator';\nimport { addMessage } from 'src/reducers/actions';\nimport type {\n  MessageAction,\n  Message,\n  FullUser,\n  ReducerState,\n} from 'src/reducers/types';\nimport sendIcon from 'src/static/assets/send.svg';\nimport { tappable } from 'src/styles';\n\nconst MessageInput = React.lazy(() => import('./MessageInput'));\nconst EmojiPicker = React.lazy(() => import('./EmojiPicker'));\n\nconst Root = styled.div<{}>({\n  display: 'flex',\n  alignItems: 'center',\n  padding: '12px 12px 0 12px',\n});\n\nconst SendIcon = styled.img<{}>({\n  height: 24,\n  width: 24,\n  ...tappable,\n});\n\ntype Props = {|\n  user: FullUser,\n  dispatch: (message: Message, author: FullUser) => void,\n|};\n\nconst AddMessage = (props: Props) => {\n  const textAreaRef = React.useRef(null);\n  const [message, setMessage] = React.useState('');\n  const [showEmojiPicker, setShowEmojiPicker] = React.useState(false);\n\n  function handleSendMessage() {\n    // Only focus on text input if emoji keyboard is not already open\n    if (!showEmojiPicker) textAreaRef.current?.focus();\n    // Trim message when sending\n    const trimmedMessage = message.trim();\n    if (trimmedMessage !== '')\n      props.dispatch(message, { id: props.user.id, name: 'Me' });\n    setMessage('');\n  }\n\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <div>\n        <Root>\n          <MessageInput\n            textAreaRef={textAreaRef}\n            placeholder=\"Aa\"\n            text={message}\n            onChange={(text) => setMessage(text)}\n            onKeyPress={(e) => {\n              if (e.key === 'Enter') {\n                e.preventDefault();\n                handleSendMessage();\n              }\n            }}\n            onShowEmojiPicker={() => setShowEmojiPicker((e) => !e)}\n            closeEmojiPicker={() => setShowEmojiPicker(false)}\n          />\n          <Separator size={12} />\n          <SendIcon src={sendIcon} alt=\"Send\" onClick={handleSendMessage} />\n        </Root>\n        <Separator size={8} />\n        <EmojiPicker\n          isOpen={showEmojiPicker}\n          onEmojiSelect={(emoji) =>\n            setMessage((m) =>\n              m.length > 0 ? `${m.trim()} ${emoji} ` : `${emoji} `,\n            )\n          }\n        />\n        <Separator size={12} />\n      </div>\n    </React.Suspense>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: (MessageAction) => void) => ({\n  dispatch: (message: Message, author: FullUser) => {\n    dispatch(addMessage(message, author));\n  },\n});\n\nconst AddMessageContainer = connect(\n  () => (state: ReducerState) => ({\n    user: state.user,\n  }),\n  mapDispatchToProps,\n)(AddMessage);\n\nexport default AddMessageContainer;\n"],"sourceRoot":""}
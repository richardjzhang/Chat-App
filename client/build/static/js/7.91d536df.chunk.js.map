{"version":3,"sources":["static/assets/logo.svg","views/TouchDevice/Header.js","views/TouchDevice/index.js","styles.js","components/Separator.js","components/MessagesList.js","static/assets/send.svg","components/AddMessage/index.js"],"names":["Root","styled","div","position","top","left","borderBottom","colors","grayChateau","padding","width","display","alignItems","backgroundColor","white","Logo","img","height","Info","color","shuttleGray","fontSize","HeaderContainer","connect","state","users","src","logo","alt","Separator","grow","size","length","Messages","paddingTop","flexDirection","TouchDevice","MessagesList","AddMessage","dodgerBlue","cloudBurst","honorNight","sail","iceCold","dairyCream","cupid","athensGray","black","tappable","cursor","userSelect","WebkitTapHighlightColor","WebkitTouchCallout","breakpoints","laptop","props","flexShrink","flexGrow","marginTop","overflow","MessageContainer","borderRadius","maxWidth","User","fontWeight","Message","MessagesListContainer","messages","user","map","message","idx","prevMessage","groupMessages","author","id","isAuthor","Fragment","css","MessageInput","React","lazy","EmojiPicker","SendIcon","AddMessageContainer","dispatch","addMessage","textAreaRef","useRef","useState","setMessage","showEmojiPicker","setShowEmojiPicker","handleSendMessage","current","focus","trim","name","Suspense","fallback","placeholder","text","onChange","onKeyPress","e","key","preventDefault","onShowEmojiPicker","closeEmojiPicker","sendIcon","onClick","isOpen","onEmojiSelect","emoji","m"],"mappings":"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","file":"static/js/7.91d536df.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.cf7d5d26.svg\";","// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport Separator from 'src/components/Separator';\nimport type { ReducerState, Users } from 'src/reducers/types';\nimport logo from 'src/static/assets/logo.svg';\nimport { colors } from 'src/styles';\n\nconst PADDING = 16;\nconst LOGO_SIZE = 32;\nconst BORDER_WIDTH = 1;\nexport const HEADER_HEIGHT = 2 * PADDING + LOGO_SIZE;\n\nconst Root = styled.div<{}>({\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  borderBottom: `${BORDER_WIDTH}px solid ${colors.grayChateau}`,\n  padding: PADDING,\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  backgroundColor: colors.white,\n});\n\nconst Logo = styled.img<{}>({\n  height: LOGO_SIZE,\n  width: LOGO_SIZE,\n});\n\nconst Info = styled.div<{}>({\n  color: colors.shuttleGray,\n  fontSize: 14,\n});\n\ntype Props = {|\n  users: Users,\n|};\n\nconst Header = ({ users }: Props) => {\n  return (\n    <Root>\n      <Logo src={logo} alt=\"Logo\" />\n      <Separator grow size={8} />\n      <Info>Active users: {users.length}</Info>\n    </Root>\n  );\n};\n\nexport const HeaderContainer = connect(\n  (state: ReducerState) => ({\n    users: state.users,\n  }),\n  {},\n)(Header);\n\nexport default HeaderContainer;\n","// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport AddMessage from 'src/components/AddMessage';\nimport MessagesList from 'src/components/MessagesList';\n\nimport Header, { HEADER_HEIGHT } from './Header';\n\nconst Messages = styled.div<{}>({\n  paddingTop: HEADER_HEIGHT,\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nfunction TouchDevice() {\n  return (\n    <>\n      <Header />\n      <Messages>\n        <MessagesList />\n        <AddMessage />\n      </Messages>\n    </>\n  );\n}\n\nexport default TouchDevice;\n","// @flow\nexport const colors = {\n  // Primary Colors\n  dodgerBlue: '#3B80FE',\n  cloudBurst: '#21374D',\n  honorNight: '#0C2426',\n\n  // Palette\n  sail: '#B7D8F9',\n  iceCold: '#B7F9D8',\n  dairyCream: '#F9D8B7',\n  cupid: '#F9B7D8',\n\n  // Greys\n  athensGray: '#E7E7EF',\n  grayChateau: '#A2AAB3',\n  shuttleGray: '#616470',\n\n  // Other\n  white: '#FFF',\n  black: '#000000',\n};\n\n// It doesn't fix all the possible issues on all browsers or devices, feel free to add rules\nexport const tappable = {\n  cursor: 'pointer',\n  userSelect: 'none', // to prevent the text selection (e.g. selecting text triggers the copy-paste popup menu on iOS and Android)\n  WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)', // to prevent the default tap highlight colour being applied\n  WebkitTouchCallout: 'none', // to prevent the context menu from showing, at least on iOS for anchor elements\n};\n\nexport const breakpoints = {\n  laptop: 1024,\n};\n","// @flow\nimport styled from '@emotion/styled';\n\nconst Separator = styled.div<{ grow?: boolean, size: number }>((props) => ({\n  flexShrink: 0,\n  height: props.size,\n  width: props.size,\n  ...(props.grow ? { flexGrow: 1 } : {}),\n}));\n\nexport default Separator;\n","// @flow\n/** @jsxImportSource @emotion/react */\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport Separator from 'src/components/Separator';\nimport type { ReducerState } from 'src/reducers/types';\nimport { breakpoints, colors } from 'src/styles';\n\nconst Root = styled.div<{}>({\n  display: 'flex',\n  flexDirection: 'column-reverse',\n  borderBottom: `1px solid ${colors.grayChateau}`,\n  marginTop: 12, // Hack to ensure that there is space above when there is overflow\n  padding: '0 20px 12px 20px',\n  height: '100%',\n  overflow: 'auto',\n});\n\nconst MessageContainer = styled.div<{}>({\n  padding: 12,\n  borderRadius: 16,\n  width: 'fit-content',\n  maxWidth: 400,\n\n  [`@media (max-width: ${breakpoints.laptop + 1}px)`]: {\n    maxWidth: 300,\n  },\n});\n\nconst User = styled.div<{}>({\n  fontSize: 16,\n  fontWeight: 600,\n});\n\nconst Message = styled.div<{}>({\n  fontSize: 16,\n});\n\nconst MessagesList = ({ messages, user }) => {\n  return (\n    <Root>\n      <div>\n        {messages.map((message, idx) => {\n          const prevMessage = idx > 0 ? messages[idx - 1] : null;\n          const groupMessages = prevMessage?.author.id === message.author.id;\n          const isAuthor = message.author.id === user.id;\n          return (\n            <React.Fragment key={message.id}>\n              {idx !== 0 && <Separator size={groupMessages ? 4 : 16} />}\n              <div css={{ display: 'flex' }}>\n                {isAuthor && <Separator grow size={16} />}\n                <MessageContainer\n                  css={{\n                    backgroundColor: isAuthor\n                      ? colors.dodgerBlue\n                      : colors.athensGray,\n                    color: isAuthor ? colors.white : colors.cloudBurst,\n                  }}\n                >\n                  {!isAuthor && (\n                    <>\n                      <User>{message.author}</User>\n                      <Separator size={4} />\n                    </>\n                  )}\n                  <Message>{message.message}</Message>\n                </MessageContainer>\n              </div>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </Root>\n  );\n};\n\nexport const MessagesListContainer = connect(\n  (state: ReducerState) => ({\n    messages: state.messages,\n    user: state.user,\n  }),\n  {},\n)(MessagesList);\n\nexport default MessagesListContainer;\n","export default __webpack_public_path__ + \"static/media/send.35a24809.svg\";","// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport Separator from 'src/components/Separator';\nimport { addMessage } from 'src/reducers/actions';\nimport type {\n  MessageAction,\n  Message,\n  FullUser,\n  ReducerState,\n} from 'src/reducers/types';\nimport sendIcon from 'src/static/assets/send.svg';\nimport { tappable } from 'src/styles';\n\nconst MessageInput = React.lazy(() => import('./MessageInput'));\nconst EmojiPicker = React.lazy(() => import('./EmojiPicker'));\n\nconst Root = styled.div<{}>({\n  display: 'flex',\n  alignItems: 'center',\n  padding: '12px 12px 0 12px',\n});\n\nconst SendIcon = styled.img<{}>({\n  height: 24,\n  width: 24,\n  ...tappable,\n});\n\ntype Props = {|\n  user: FullUser,\n  dispatch: (message: Message, author: FullUser) => void,\n|};\n\nconst AddMessage = (props: Props) => {\n  const textAreaRef = React.useRef(null);\n  const [message, setMessage] = React.useState('');\n  const [showEmojiPicker, setShowEmojiPicker] = React.useState(false);\n\n  function handleSendMessage() {\n    // Only focus on text input if emoji keyboard is not already open\n    if (!showEmojiPicker) textAreaRef.current?.focus();\n    // Trim message when sending\n    const trimmedMessage = message.trim();\n    if (trimmedMessage !== '')\n      props.dispatch(message, { id: props.user.id, name: 'Me' });\n    setMessage('');\n  }\n\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <div>\n        <Root>\n          <MessageInput\n            textAreaRef={textAreaRef}\n            placeholder=\"Aa\"\n            text={message}\n            onChange={(text) => setMessage(text)}\n            onKeyPress={(e) => {\n              if (e.key === 'Enter') {\n                e.preventDefault();\n                handleSendMessage();\n              }\n            }}\n            onShowEmojiPicker={() => setShowEmojiPicker((e) => !e)}\n            closeEmojiPicker={() => setShowEmojiPicker(false)}\n          />\n          <Separator size={12} />\n          <SendIcon src={sendIcon} alt=\"Send\" onClick={handleSendMessage} />\n        </Root>\n        <Separator size={8} />\n        <EmojiPicker\n          isOpen={showEmojiPicker}\n          onEmojiSelect={(emoji) =>\n            setMessage((m) =>\n              m.length > 0 ? `${m.trim()} ${emoji} ` : `${emoji} `,\n            )\n          }\n        />\n        <Separator size={12} />\n      </div>\n    </React.Suspense>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: (MessageAction) => void) => ({\n  dispatch: (message: Message, author: FullUser) => {\n    dispatch(addMessage(message, author));\n  },\n});\n\nconst AddMessageContainer = connect(\n  () => (state: ReducerState) => ({\n    user: state.user,\n  }),\n  mapDispatchToProps,\n)(AddMessage);\n\nexport default AddMessageContainer;\n"],"sourceRoot":""}
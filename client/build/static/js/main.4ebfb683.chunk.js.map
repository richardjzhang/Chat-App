{"version":3,"sources":["reducers/constants.js","reducers/messages.js","reducers/users.js","reducers/index.js","utils/names.js","utils/sagas.js","reducers/actions.js","utils/sockets.js","styles.js","components/AddMessage.js","components/Separator.js","components/MessagesList.js","components/Sidebar.js","App.js","reportWebVitals.js","index.js"],"names":["ADD_MESSAGE","MESSAGE_RECEIVED","USERS_LIST","messages","state","action","type","types","message","author","id","users","chat","combineReducers","chance","Chance","first","handleNewMessage","params","takeEvery","username","socket","send","JSON","stringify","nextMessageId","setupSocket","dispatch","HOST","location","origin","replace","WebSocket","onopen","name","onmessage","event","data","parse","String","colors","Root","styled","div","padding","height","Input","textarea","width","outline","resize","backgroundColor","border","borderRadius","AddMessageContainer","connect","addMessage","props","React","useState","setMessage","placeholder","value","onChange","e","target","onKeyPress","key","preventDefault","Separator","flexShrink","size","borderBottom","overflow","MessageContainer","display","alignItems","User","color","fontSize","fontWeight","Message","MessagesListContainer","map","idx","Fragment","borderRight","UsersList","maxHeight","Title","SidebarContainer","user","justifyContent","Messages","flexDirection","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","WebFont","load","google","families","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ebfb683.chunk.js","sourcesContent":["// @flow\nconst ADD_MESSAGE = 'ADD_MESSAGE';\nconst MESSAGE_RECEIVED = 'MESSAGE_RECEIVED';\nconst ADD_USER = 'ADD_USER';\nconst USERS_LIST = 'USERS_LIST';\n\nexport { ADD_MESSAGE, MESSAGE_RECEIVED, ADD_USER, USERS_LIST };\n","// @flow\nimport * as types from './constants';\nimport type { MessageAction, MessageData } from './types';\n\nconst messages = (state: Array<MessageData> = [], action: MessageAction) => {\n  switch (action.type) {\n    case types.ADD_MESSAGE:\n    case types.MESSAGE_RECEIVED:\n      return [\n        ...state,\n        { message: action.message, author: action.author, id: action.id },\n      ];\n    default:\n      return state;\n  }\n};\n\nexport default messages;\n","// @flow\nimport * as types from './constants';\nimport type { UserAction, UserData } from './types';\n\nconst users = (state: Array<UserData> = [], action: UserAction) => {\n  switch (action.type) {\n    case types.USERS_LIST:\n      return action.users;\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","// @flow\nimport { combineReducers } from 'redux';\n\nimport messages from './messages';\nimport users from './users';\n\nconst chat = combineReducers({\n  messages,\n  users,\n});\n\nexport default chat;\n","// @flow\nimport Chance from 'chance';\n\nconst chance = new Chance();\nexport default chance.first();\n","// @flow\nimport { takeEvery } from 'redux-saga/effects';\n\nimport * as types from 'src/reducers/constants';\nimport type { UserName } from 'src/reducers/types';\n\nconst handleNewMessage = function* handleNewMessage(params: {\n  socket: typeof WebSocket,\n  username: UserName,\n}): any {\n  yield takeEvery(types.ADD_MESSAGE, (action) => {\n    action.author = params.username;\n    // $FlowFixMe the flow-typed library doesn't know about the methods of sockets\n    params.socket.send(JSON.stringify(action));\n  });\n};\n\nexport default handleNewMessage;\n","// @flow\nimport * as types from './constants';\nimport type {\n  MessageAction,\n  Message,\n  MessageAuthor,\n  UserAction,\n  Users,\n} from './types';\n\nlet nextMessageId = 0;\n\nexport const addMessage = (\n  message: Message,\n  author: MessageAuthor,\n): MessageAction => ({\n  type: types.ADD_MESSAGE,\n  id: nextMessageId++,\n  message,\n  author,\n});\n\nexport const messageReceived = (\n  message: Message,\n  author: MessageAuthor,\n): MessageAction => ({\n  type: types.MESSAGE_RECEIVED,\n  id: nextMessageId++,\n  message,\n  author,\n});\n\nexport const populateUsersList = (users: Users): UserAction => ({\n  type: types.USERS_LIST,\n  users,\n});\n","// @flow\nimport { messageReceived, populateUsersList } from 'src/reducers/actions';\nimport * as types from 'src/reducers/constants';\nimport type { MessageAction, UserAction, UserName } from 'src/reducers/types';\n\nconst setupSocket = (\n  dispatch: (MessageAction | UserAction) => void,\n  username: UserName,\n) => {\n  const HOST = location.origin.replace(/^http/, 'ws');\n  const socket = new WebSocket(HOST);\n\n  socket.onopen = () => {\n    socket.send(\n      JSON.stringify({\n        type: types.ADD_USER,\n        name: username,\n      }),\n    );\n  };\n  socket.onmessage = (event: MessageEvent) => {\n    const data = JSON.parse(String(event.data));\n    switch (data.type) {\n      case types.ADD_MESSAGE:\n        dispatch(messageReceived(data.message, data.author));\n        break;\n      case types.USERS_LIST:\n        dispatch(populateUsersList(data.users));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return socket;\n};\n\nexport default setupSocket;\n","// @flow\nexport const colors = {\n  // Primary Colors\n  dodgerBlue: '#3B80FE',\n  cloudBurst: '#21374D',\n  honorNight: '#0C2426',\n\n  // Palette\n  sail: '#B7D8F9',\n  iceCold: '#B7F9D8',\n  dairyCream: '#F9D8B7',\n  cupid: '#F9B7D8',\n\n  // Greys\n  athensGray: '#E7E7EF',\n  grayChateau: '#A2AAB3',\n\n  // Other\n  white: '#FFF',\n  black: '#000000',\n};\n","// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { addMessage } from 'src/reducers/actions';\nimport type { MessageAction, Message, MessageAuthor } from 'src/reducers/types';\nimport { colors } from 'src/styles';\n\nconst Root = styled.div<{}>({\n  padding: 20,\n  height: 200,\n});\n\nconst Input = styled.textarea<{}>({\n  width: '100%',\n  height: '100%',\n  outline: 'none',\n  padding: 8,\n  resize: 'none',\n  backgroundColor: colors.athensGray,\n  border: 'none',\n  borderRadius: 8,\n});\n\ntype Props = {|\n  dispatch: (message: Message, author: MessageAuthor) => void,\n|};\n\nconst AddMessage = (props: Props) => {\n  const [message, setMessage] = React.useState('');\n  return (\n    <Root>\n      <Input\n        placeholder=\"Aa\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            props.dispatch(message, 'Me');\n            setMessage('');\n          }\n        }}\n      />\n    </Root>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: (MessageAction) => void) => ({\n  dispatch: (message: Message, author: MessageAuthor) => {\n    dispatch(addMessage(message, author));\n  },\n});\n\nconst AddMessageContainer = connect(() => ({}), mapDispatchToProps)(AddMessage);\n\nexport default AddMessageContainer;\n","// @flow\nimport styled from '@emotion/styled';\n\nconst Separator = styled.div<{ size: number }>((props) => ({\n  flexShrink: 0,\n  height: props.size,\n  width: props.size,\n}));\n\nexport default Separator;\n","// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport Separator from 'src/components/Separator';\nimport type { ReducerState } from 'src/reducers/types';\nimport { colors } from 'src/styles';\n\nconst Root = styled.div<{}>({\n  borderBottom: `1px solid ${colors.grayChateau}`,\n  padding: 20,\n  height: '100%',\n  overflow: 'auto',\n});\n\nconst MessageContainer = styled.div<{}>({\n  display: 'flex',\n  alignItems: 'flex-start',\n});\n\nconst User = styled.div<{}>({\n  color: colors.cloudBurst,\n  fontSize: 16,\n  fontWeight: 600,\n});\n\nconst Message = styled.div<{}>({\n  color: colors.cloudBurst,\n  fontSize: 16,\n});\n\nconst MessagesList = ({ messages }) => {\n  return (\n    <Root>\n      {messages.map((message, idx) => (\n        <React.Fragment key={message.id}>\n          {idx !== 0 && <Separator size={8} />}\n          <MessageContainer>\n            <User>{message.author}:</User>\n            <Separator size={8} />\n            <Message>{message.message}</Message>\n          </MessageContainer>\n        </React.Fragment>\n      ))}\n    </Root>\n  );\n};\n\nexport const MessagesListContainer = connect(\n  (state: ReducerState) => ({\n    messages: state.messages,\n  }),\n  {},\n)(MessagesList);\n\nexport default MessagesListContainer;\n","// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport Separator from 'src/components/Separator';\nimport type { ReducerState, Users } from 'src/reducers/types';\nimport { colors } from 'src/styles';\n\nconst Root = styled.div<{}>({\n  padding: 24,\n  height: '100%',\n  width: 400,\n  borderRight: `1px solid ${colors.grayChateau}`,\n  flexShrink: 0,\n});\n\nconst UsersList = styled.div<{}>({\n  maxHeight: '100%',\n  overflow: 'auto',\n});\n\nconst Title = styled.div<{}>({\n  color: colors.cloudBurst,\n  fontSize: 32,\n  fontWeight: 600,\n});\n\nconst User = styled.div<{}>({\n  color: colors.cloudBurst,\n  fontSize: 24,\n});\n\ntype Props = {|\n  users: Users,\n|};\n\nconst Sidebar = ({ users }: Props) => {\n  return (\n    <Root>\n      <Title>Users</Title>\n      <Separator size={32} />\n      <UsersList>\n        {users.map((user, idx) => (\n          <React.Fragment key={`${user.name}-${idx}`}>\n            {idx !== 0 && <Separator size={12} />}\n            <User>{user.name}</User>\n          </React.Fragment>\n        ))}\n      </UsersList>\n    </Root>\n  );\n};\n\nexport const SidebarContainer = connect(\n  (state: ReducerState) => ({\n    users: state.users,\n  }),\n  {},\n)(Sidebar);\n\nexport default SidebarContainer;\n","// @flow\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport AddMessage from 'src/components/AddMessage';\nimport MessagesList from 'src/components/MessagesList';\nimport Sidebar from 'src/components/Sidebar';\n\nconst Root = styled.div<{}>({\n  height: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n});\n\nconst Messages = styled.div<{}>({\n  display: 'flex',\n  flexDirection: 'column',\n  width: '100%',\n  height: '100%',\n});\n\nfunction App() {\n  return (\n    <Root>\n      <Sidebar />\n      <Messages>\n        <MessagesList />\n        <AddMessage />\n      </Messages>\n    </Root>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport WebFont from 'webfontloader';\n\nimport reducers from 'src/reducers';\nimport username from 'src/utils/names';\nimport handleNewMessage from 'src/utils/sagas';\nimport setupSocket from 'src/utils/sockets';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nWebFont.load({\n  google: {\n    families: ['Jost:400', 'Jost:500', 'Jost:600', 'sans-serif'],\n  },\n});\n\n// WebSocket and Reducer setup\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducers, applyMiddleware(sagaMiddleware));\nconst socket = setupSocket(store.dispatch, username);\nsagaMiddleware.run(handleNewMessage, { socket, username });\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
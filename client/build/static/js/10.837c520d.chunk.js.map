{"version":3,"sources":["static/assets/emoji.svg","components/AddMessage/MessageInput.js"],"names":["Parent","styled","div","padding","minHeight","maxHeight","width","display","alignItems","transition","backgroundColor","colors","athensGray","borderRadius","TextArea","textarea","outline","resize","border","EmojiIcon","img","height","tappable","MessageInput","textAreaRef","placeholder","text","onChange","onKeyPress","onShowEmojiPicker","closeEmojiPicker","React","useState","textAreaHeight","setTextAreaHeight","parentHeight","setParentHeight","useEffect","current","scrollHeight","css","ref","value","rows","style","event","target","isMobile","onFocus","Separator","size","src","emojiIcon","alt","onClick"],"mappings":"0KAAe,MAA0B,kC,QCoBnCA,EAASC,IAAOC,IAAQ,CAC5BC,QAAQ,GAAD,OAJgB,EAIhB,cAHkB,GAGlB,MACPC,UAAW,GACXC,UAPiB,GAQjBC,MAAO,OACPC,QAAS,OACTC,WAAY,SACZC,WAAY,oBACZC,gBAAiBC,IAAOC,WACxBC,aAAc,KAGVC,EAAWb,IAAOc,SAAa,CACnCV,UAAW,OACXC,MAAO,OACPU,QAAS,OACTb,QAAS,EACTI,QAAS,QACTU,OAAQ,OACRC,OAAQ,OACRR,gBAAiBC,IAAOC,WACxBH,WAAY,sBAGRU,EAAYlB,IAAOmB,IAAP,aAChBC,OAAQ,GACRf,MAAO,IACJgB,MA0EUC,UA7DM,SAAC,GAQR,IAPZC,EAOW,EAPXA,YACAC,EAMW,EANXA,YACAC,EAKW,EALXA,KACAC,EAIW,EAJXA,SACAC,EAGW,EAHXA,WACAC,EAEW,EAFXA,kBACAC,EACW,EADXA,iBACW,EACiCC,IAAMC,SAAS,QADhD,mBACJC,EADI,KACYC,EADZ,OAE6BH,IAAMC,SAAS,QAF5C,mBAEJG,EAFI,KAEUC,EAFV,KAIXL,IAAMM,WAAU,WACd,GAA2B,MAAvBb,EAAYc,QAAiB,CAAC,IACxBC,EAAiBf,EAAYc,QAA7BC,aACK,KAATb,GACFU,EAAgB,QAChBF,EAAkB,UAElBE,EAAgB,GAAD,OAAIG,EAAe,EAAnB,OACfL,EAAkB,GAAD,OAAIK,EAAJ,WAGpB,CAACf,EAAaE,IAUjB,OACE,YAAC1B,EAAD,CACEwC,IAAK,CACHnB,OAAQc,GAFZ,UAKE,YAACrB,EAAD,aACE2B,IAAKjB,EACLC,YAAaA,EACbiB,MAAOhB,EACPiB,KAAM,EACNC,MAAO,CACLvB,OAAQY,GAEVN,SAtBkB,SAACkB,GACI,MAAvBrB,EAAYc,UACdF,EAAgB,GAAD,OAAIZ,EAAYc,QAAQC,aAAxB,OACfL,EAAkB,QAClBP,EAASkB,EAAMC,OAAOJ,SAmBpBd,WAAYA,GACPmB,WAAW,CAAEC,QAASlB,GAAqB,KAElD,YAACmB,EAAA,EAAD,CAAWC,KAAM,KACjB,YAAC/B,EAAD,CACEgC,IAAKC,EACLC,IAAI,cACJC,QAASzB","file":"static/js/10.837c520d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/emoji.07c622fd.svg\";","// @flow\n/** @jsxImportSource @emotion/react */\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport Separator from 'src/components/Separator';\nimport emojiIcon from 'src/static/assets/emoji.svg';\nimport { colors, tappable } from 'src/styles';\nimport type { ReactRefType } from 'src/utils/flow';\n\n/*\n  Inspired by the following approach\n  https://medium.com/@lucasalgus/creating-a-custom-auto-resize-textarea-component-for-your-react-web-application-6959c0ad68bc\n*/\n\nconst MAX_HEIGHT = 90;\nconst VERTICAL_PADDING = 4;\nconst HORIZONTAL_PADDING = 12;\n\nconst Parent = styled.div<{}>({\n  padding: `${VERTICAL_PADDING}px ${HORIZONTAL_PADDING}px`,\n  minHeight: 36,\n  maxHeight: MAX_HEIGHT,\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  transition: 'height 0.25s ease',\n  backgroundColor: colors.athensGray,\n  borderRadius: 20,\n});\n\nconst TextArea = styled.textarea<{}>({\n  maxHeight: '100%',\n  width: '100%',\n  outline: 'none',\n  padding: 0,\n  display: 'block',\n  resize: 'none',\n  border: 'none',\n  backgroundColor: colors.athensGray,\n  transition: 'height 0.25s ease',\n});\n\nconst EmojiIcon = styled.img<{}>({\n  height: 20,\n  width: 20,\n  ...tappable,\n});\n\ntype Props = {|\n  textAreaRef: ReactRefType<HTMLTextAreaElement>,\n  placeholder: string,\n  text: string,\n  onChange: (string) => void,\n  onKeyPress: (SyntheticKeyboardEvent<EventTarget>) => void,\n  onShowEmojiPicker: () => void,\n  closeEmojiPicker: () => void,\n|};\n\nconst MessageInput = ({\n  textAreaRef,\n  placeholder,\n  text,\n  onChange,\n  onKeyPress,\n  onShowEmojiPicker,\n  closeEmojiPicker,\n}: Props) => {\n  const [textAreaHeight, setTextAreaHeight] = React.useState('auto');\n  const [parentHeight, setParentHeight] = React.useState('auto');\n\n  React.useEffect(() => {\n    if (textAreaRef.current != null) {\n      const { scrollHeight } = textAreaRef.current;\n      if (text === '') {\n        setParentHeight('auto');\n        setTextAreaHeight('auto');\n      } else {\n        setParentHeight(`${scrollHeight + 2 * VERTICAL_PADDING}px`);\n        setTextAreaHeight(`${scrollHeight}px`);\n      }\n    }\n  }, [textAreaRef, text]);\n\n  const onChangeHandler = (event: SyntheticInputEvent<EventTarget>) => {\n    if (textAreaRef.current != null) {\n      setParentHeight(`${textAreaRef.current.scrollHeight}px`);\n      setTextAreaHeight('auto');\n      onChange(event.target.value);\n    }\n  };\n\n  return (\n    <Parent\n      css={{\n        height: parentHeight,\n      }}\n    >\n      <TextArea\n        ref={textAreaRef}\n        placeholder={placeholder}\n        value={text}\n        rows={1}\n        style={{\n          height: textAreaHeight,\n        }}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPress}\n        {...(isMobile ? { onFocus: closeEmojiPicker } : {})}\n      />\n      <Separator size={16} />\n      <EmojiIcon\n        src={emojiIcon}\n        alt=\"Emoji Icons\"\n        onClick={onShowEmojiPicker}\n      />\n    </Parent>\n  );\n};\n\nexport default MessageInput;\n"],"sourceRoot":""}
{"version":3,"sources":["reducers/actions.js","reducers/messages.js","reducers/user.js","reducers/users.js","reducers/index.js","utils/sockets.js","App.js","reportWebVitals.js","index.js","reducers/constants.js"],"names":["nextMessageId","addMessage","message","author","type","types","id","messageReceived","populateUsersList","users","addUser","user","messages","state","action","chat","combineReducers","setupSocket","dispatch","username","process","NODE_ENV","WEBSOCKET_DEV_PORT","HOST","location","origin","replace","socket","WebSocket","onopen","send","JSON","stringify","name","onmessage","event","data","parse","String","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","Desktop","React","lazy","TouchDevice","ChooseName","App","Suspense","fallback","isMobile","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","ADD_MESSAGE","MESSAGE_RECEIVED","ADD_USER","USERS_LIST"],"mappings":"6FACA,mJAWIA,EAAgB,EAEPC,EAAa,SACxBC,EACAC,GAFwB,MAGL,CACnBC,KAAMC,IACNC,GAAIN,IACJE,UACAC,WAGWI,EAAkB,SAC7BL,EACAC,GAF6B,MAGV,CACnBC,KAAMC,IACNC,GAAIN,IACJE,UACAC,WAGWK,EAAoB,SAACC,GAAD,MAAmC,CAClEL,KAAMC,IACNI,UAGWC,EAAU,SAACC,GAAD,MAA6B,CAClDP,KAAMC,IACNM,U,wKCxBaC,EAbE,WAA4D,IAA3DC,EAA0D,uDAA9B,GAAIC,EAA0B,uCAC1E,OAAQA,EAAOV,MACb,KAAKC,IACL,KAAKA,IACH,MAAM,GAAN,mBACKQ,GADL,CAEE,CAAEX,QAASY,EAAOZ,QAASC,OAAQW,EAAOX,OAAQG,GAAIQ,EAAOR,MAEjE,QACE,OAAOO,ICAEF,EATF,WAAkD,IAAjDE,EAAgD,uDAA7B,KAAMC,EAAuB,uCAC5D,OAAQA,EAAOV,MACb,KAAKC,IACH,OAAOS,EAAOH,KAChB,QACE,OAAOE,ICIEJ,EATD,WAAgD,IAA/CI,EAA8C,uDAA/B,GAAIC,EAA2B,uCAC3D,OAAQA,EAAOV,MACb,KAAKC,IACH,OAAOS,EAAOL,MAChB,QACE,OAAOI,ICIEE,EANFC,YAAgB,CAC3BJ,WACAH,QACAE,S,QCQIM,EAAc,SAClBC,EACAC,GACI,IAAD,EAC4DC,mIAD5D,IACKC,gBADL,MACgB,aADhB,MAC8BC,0BAD9B,MACmD,KADnD,EAEGC,EAAOC,SAASC,OAAOC,QAAQ,QAAS,MAIxCC,EAAS,IAAIC,UACJ,eAAbP,EAA4BE,EAA5B,yBAAqDD,IA6BvD,OA1BAK,EAAOE,OAAS,WACdF,EAAOG,KACLC,KAAKC,UAAU,CACb5B,KAAMC,IACN4B,KAAMd,MAKZQ,EAAOO,UAAY,SAACC,GAClB,IAAMC,EAAOL,KAAKM,MAAMC,OAAOH,EAAMC,OACrC,OAAQA,EAAKhC,MACX,KAAKC,IACHa,EAASX,YAAgB6B,EAAKlC,QAASkC,EAAKjC,SAC5C,MACF,KAAKE,IACHa,EAASV,YAAkB4B,EAAK3B,QAChC,MACF,KAAKJ,IACHa,EAASR,YAAQ0B,EAAKzB,SAOrBgB,GAGHY,EAAiBC,cACjBC,EAAQC,YAAYC,EAAUC,YAAgBL,K,wICzD9CM,EAAUC,IAAMC,MAAK,kBAAM,uDAC3BC,EAAcF,IAAMC,MAAK,kBAAM,uDAC/BE,EAAaH,IAAMC,MAAK,kBAAM,8DAWrBG,MATf,WACE,OACE,eAAC,IAAMC,SAAP,CAAgBC,SAAU,6CAA1B,UACE,cAACH,EAAD,IACCI,WAAW,cAACL,EAAD,IAAkB,cAACH,EAAD,QCArBS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGdQ,IAASC,OACP,cAAC,IAAD,CAAUvB,MAAOA,IAAjB,SACE,cAAC,EAAD,MAEFwB,SAASC,eAAe,SAM1BZ,K,+BCnBA,4IAAMa,EAAc,cACdC,EAAmB,mBACnBC,EAAW,WACXC,EAAa,e","file":"static/js/main.e8d6db8c.chunk.js","sourcesContent":["// @flow\nimport * as types from './constants';\nimport type {\n  MessageAction,\n  Message,\n  FullUser,\n  UserAction,\n  UserListAction,\n  User,\n  Users,\n} from './types';\n\nlet nextMessageId = 0;\n\nexport const addMessage = (\n  message: Message,\n  author: FullUser,\n): MessageAction => ({\n  type: types.ADD_MESSAGE,\n  id: nextMessageId++,\n  message,\n  author,\n});\n\nexport const messageReceived = (\n  message: Message,\n  author: FullUser,\n): MessageAction => ({\n  type: types.MESSAGE_RECEIVED,\n  id: nextMessageId++,\n  message,\n  author,\n});\n\nexport const populateUsersList = (users: Users): UserListAction => ({\n  type: types.USERS_LIST,\n  users,\n});\n\nexport const addUser = (user: User): UserAction => ({\n  type: types.ADD_USER,\n  user,\n});\n","// @flow\nimport * as types from './constants';\nimport type { MessageAction, MessageData } from './types';\n\nconst messages = (state: Array<MessageData> = [], action: MessageAction) => {\n  switch (action.type) {\n    case types.ADD_MESSAGE:\n    case types.MESSAGE_RECEIVED:\n      return [\n        ...state,\n        { message: action.message, author: action.author, id: action.id },\n      ];\n    default:\n      return state;\n  }\n};\n\nexport default messages;\n","// @flow\nimport * as types from './constants';\nimport type { UserAction, FullUser } from './types';\n\nconst user = (state: ?FullUser = null, action: UserAction) => {\n  switch (action.type) {\n    case types.ADD_USER:\n      return action.user;\n    default:\n      return state;\n  }\n};\n\nexport default user;\n","// @flow\nimport * as types from './constants';\nimport type { UserListAction, Users } from './types';\n\nconst users = (state: Users = [], action: UserListAction) => {\n  switch (action.type) {\n    case types.USERS_LIST:\n      return action.users;\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","// @flow\nimport { combineReducers } from 'redux';\n\nimport messages from './messages';\nimport user from './user';\nimport users from './users';\n\nconst chat = combineReducers({\n  messages,\n  users,\n  user,\n});\n\nexport default chat;\n","// @flow\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducers from 'src/reducers';\nimport {\n  addUser,\n  messageReceived,\n  populateUsersList,\n} from 'src/reducers/actions';\nimport * as types from 'src/reducers/constants';\nimport type {\n  MessageAction,\n  UserAction,\n  UserListAction,\n  UserName,\n} from 'src/reducers/types';\n\nconst setupSocket = (\n  dispatch: (MessageAction | UserListAction | UserAction) => void,\n  username: UserName,\n) => {\n  const { NODE_ENV = 'production', WEBSOCKET_DEV_PORT = 8989 } = process.env;\n  const HOST = location.origin.replace(/^http/, 'ws');\n\n  // If in development mode, hook up to local websocket running on separate server.\n  // Otherwise, use current port\n  const socket = new WebSocket(\n    NODE_ENV === 'production' ? HOST : `ws://localhost:${WEBSOCKET_DEV_PORT}`,\n  );\n\n  socket.onopen = () => {\n    socket.send(\n      JSON.stringify({\n        type: types.ADD_USER,\n        name: username,\n      }),\n    );\n  };\n\n  socket.onmessage = (event: MessageEvent) => {\n    const data = JSON.parse(String(event.data));\n    switch (data.type) {\n      case types.ADD_MESSAGE:\n        dispatch(messageReceived(data.message, data.author));\n        break;\n      case types.USERS_LIST:\n        dispatch(populateUsersList(data.users));\n        break;\n      case types.ADD_USER:\n        dispatch(addUser(data.user));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return socket;\n};\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducers, applyMiddleware(sagaMiddleware));\n\nexport { sagaMiddleware, setupSocket, store };\n","// @flow\nimport React from 'react';\nimport { isMobile } from 'react-device-detect';\n\nconst Desktop = React.lazy(() => import('src/views/Desktop'));\nconst TouchDevice = React.lazy(() => import('src/views/TouchDevice'));\nconst ChooseName = React.lazy(() => import('src/components/ChooseName'));\n\nfunction App() {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <ChooseName />\n      {isMobile ? <TouchDevice /> : <Desktop />}\n    </React.Suspense>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\n\nimport { store } from 'src/utils/sockets';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// @flow\nconst ADD_MESSAGE = 'ADD_MESSAGE';\nconst MESSAGE_RECEIVED = 'MESSAGE_RECEIVED';\nconst ADD_USER = 'ADD_USER';\nconst USERS_LIST = 'USERS_LIST';\n\nexport { ADD_MESSAGE, MESSAGE_RECEIVED, ADD_USER, USERS_LIST };\n"],"sourceRoot":""}